 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
	
	954 paquetes

 ** ¿Cuánto tiempo dura la captura?
		
	56.149345 segundos

 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?

	 192.168.1.34 Es una IP privada ya que esta dentro del rango reservado para ellas.

3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.

 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?

	UDP tiene un mayor porcentaje que TCP. 

 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?

	TCP, SIP, RTP, RTCP, HTP


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?

	En los segundos 7.343770, 7.512211, 7.567714, 7.648107, 14.426793, 14.599871, 14.610573, 16.233522, 16.334756, 16.343704
	38.119195, 38.362649, 38.362673, 38.937875, del 39.154151 al 39.229683 y del 55.694378 al 55.859934

 ** Y los paquetes con RTP, ¿cuándo se envían?
	
	Desde el segundo 17.229331 al segundo 38.119177


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?

	DNS para conocer la IP

 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?

	80.58.61.250

 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?

	 86.64.162.35

 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?

	Para comprobar la identidad del cliente

6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?

	 http://ekiga.net/ip/

 ** ¿Qué user agent (UA) la está pidiendo?
	
	El cliente  192.168.1.34

 ** ¿Qué devuelve el servidor?

	La IP publica del cliente que pregunta

 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?

	Recibo mi IP publica.


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.

	Es un protocolo que permite a clientes NAT encontrar el tipo de NAT en el que se encuentra para poder tener una conexión

 ** ¿Estamos tras un NAT?

	Si, porque hay tramas utilizando NAT en la captura.


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?

	86.64.162.35 la IP de Ekiga

 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?

	 5060

 ** ¿Qué método SIP utiliza el UA para registrarse?

	 REGISTER

 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?

	INVITE, ACK, OPTIONS, CANCEL, BYE,  REFER, MESSAGE, NOTIFY


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]
9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?

	No, porque le llega un mensaje Status: 404 no autorizado en la trama 50 y envia el REGISTER otra vez en la trama 51

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?

	Porque nos llega un mensaje Status: 200 OK

 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)

	El REGISTER correcto tiene una cabecera de autorización

 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.

	3600 segundos
	
10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?

	Si, Gregorio Robles y su direccion sip: grex@ekiga.net

 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?

	UDP

 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?

	 No tiene exito el primer INVITE porque no llega un mensaje Status: 200 OK

 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?

	En el primer INVITE no hay cabecera de autorización.

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?

	RTP. Para el envio de datos en tiempo real.

 ** ¿Cuál es el tamaño de paquete de los mismos?

	RTP: 214 bytes

 ** ¿Se utilizan bits de padding?

	Aparece la cabecera padding en los mensajes RTP con la información de False.

 ** ¿Cuál es la periodicidad de los paquetes que se envían?

	20 ms

 ** ¿Cuántos bits/segundo estamos enviando?

	((214 bytes * 8)/20) bits/milisegundos = 85600 bits/segundo

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?

	Hay dos flujos. Uno para el audio y otro para el video.

 ** ¿Cuántos paquetes se pierden?

	Se pienden el 0% de los paquetes.

 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?

	Max delta = 1290,44 ms at packet no. 297
	Delta es la diferencia entre la llegada de un paquete frente la llegada del paquete anterior.

 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?

	Max jitter = 119,64 ms. Mean jitter = 42,50 ms.

	Variacion de los tiempos de llegada de los paquetes, causada por congestion, sincronizacion o por las diferentes
	rutas seguidas por los paquetes para alcanzar el destino.

	No es una conversacion de buena calidad ya que si el jitter es grande tiene una capacidad grande
 	de variacion del retardo.


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?

	El delta y el jitter valen 0.

 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?

	No podemos saber si es el primer paquete que han enviado pero si sabemos que es el primero que recibimos.

 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?

	Hasta el paque 247.

 ** ¿A qué se debe el cambio tan brusco del jitter?

	Porque el ancho de banda de la llamada se esta reduciendo.

 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?

	No, ya que la delta aumenta mucho por el retardo y el jitter aumenta muy poco en comparación con la delta

 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?

	No se puede saber la dependencia exacta pero si podemos decir que ambos aumentan


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?

	20.88 segundos

 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?

	Sus SSRC aparecen en dos mensajes RTP 196 y 661.

	Porque sincroniza datos.

	No hay CSRCs.

15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?

	 BYE

 ** ¿En qué trama(s)?

	En las tramas 924, 925, 927 y 933.

 ** ¿Por qué crees que se envía varias veces?

	Porque no esta recibiendo el 200 OK y lo está reenviando periodicamente.

16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?

	Para borrarle de la lista del servidor.	

 ** ¿En qué trama sucede esto?

	En la trama 950 y 952.

 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?

	En el caso de los ultimos REGISTER su Expires es 0, por lo que quiere que le borre de la lista del servidor 
	antes de que pase la hora por la que se registro.



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 ** ¿Son diferentes el registro y la descripción de la sesión?


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 ** ¿Cuál es su periodicidad?
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
